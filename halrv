#!/usr/bin/env python
# Author: Ricardo Garcia Gonzalez
# License: Public domain code

import ConfigParser
import dbus
import dbus.exceptions
import os
import os.path
import sys
import traceback

# Some constants
HAL_SERVICE = 'org.freedesktop.Hal'
HAL_MANAGER_OBJ = '/org/freedesktop/Hal/Manager'
HAL_MANAGER_IFACE = 'org.freedesktop.Hal.Manager'
HAL_DEVICE_IFACE = 'org.freedesktop.Hal.Device'
HAL_VOLUME_IFACE = 'org.freedesktop.Hal.Device.Volume'

LOG_FILENAME = '.halrv.log'
CONFIG_FILENAME = '.halrv.conf'
FS_SECTION_PREFIX = 'fs'
UUID_SECTION_PREFIX = 'uuid'
MOUNT_OPTIONS_OPTION = 'mount_options'

# Return user home directory
def get_home():
	home = os.getenv('HOME')
	if home is None:
		print 'ERROR: no HOME environment variable'
		sys.exit(1)
	return home

# Send stderr to a log file
def redirect_stderr(home):
	logname = os.path.join(home, LOG_FILENAME)
	try:
		sys.stderr = open(logname, 'w')
	except (IOError, OSError):
		print 'ERROR: unable to open log file for writing: %s' % logname
		sys.exit(1)

# Create a default config file if none is present
def maybe_create_config_file(home):
	configname = os.path.join(home, CONFIG_FILENAME)
	if os.path.exists(configname):
		return
	try:
		configfile = open(configname, 'w')
		print >>configfile, '[fs:vfat]'
		print >>configfile, 'mount_options: uid=%s' % os.getuid()
		configfile.close()
	except (IOError, OSError), err:
		print 'ERROR: unable to create config file: %s' % configname
		sys.exit(1)

# Parse configuration file
def parse_config_file(home):
	# These will be returned
	fs_opts = dict()
	uuid_opts = dict()

	# Read file
	configname = os.path.join(home, CONFIG_FILENAME)
	config = ConfigParser.SafeConfigParser()
	try:
		config.read([configname])
	except (ConfigParser.Error, ), err:
		print 'ERROR: unable to parse config file: %s' % configname
		sys.exit(1)

	# Process sections and options, populating the dictionaries
	for section in config.sections():
		splitname = section.split(':')
		if splitname[0] not in [FS_SECTION_PREFIX, UUID_SECTION_PREFIX] or len(splitname) != 2 or len(splitname[1]) == 0:
			print 'ERROR: invalid section name in config file: %s' % section
			sys.exit(1)
		if not config.has_option(section, MOUNT_OPTIONS_OPTION):
			print 'ERROR: %s not present in config file section %s' % (MOUNT_OPTIONS_OPTION, section)
			sys.exit(1)
		if len(config.get(section, MOUNT_OPTIONS_OPTION)) == 0:
			print 'ERROR: empty %s in config file section %s' % (MOUNT_OPTIONS_OPTION, section)
			sys.exit(1)

		mount_opts = config.get(section, MOUNT_OPTIONS_OPTION).split(',')
		if splitname[0] == FS_SECTION_PREFIX:
			fs_opts[splitname[1]] = mount_opts
		else:
			uuid_opts[splitname[1]] = mount_opts
	
	return (fs_opts, uuid_opts)

# Parse arguments; return tuple (operation, arg)
def parse_args(argv):
	operation = None
	devicename = None

	if len(argv) == 1:
		operation = 'ls'
	else:
		operation = argv[1]
	if operation not in ['help', '-?', '-h', '--help', 'ls', 'mount', 'eject']:
		print 'ERROR: %s: unknown operation; use the "help" operation for a list' % operation
		sys.exit(1)
	if operation in ['ls', 'help', '-?', '-h', '--help'] and len(argv) > 2:
		print 'ERROR: %s does not expect any argument'
		sys.exit(1)
	if operation in ['mount', 'eject']:
		if len(argv) != 3:
			print 'ERROR: %s needs one argument' % operation
			sys.exit(1)
		devicename = argv[2]

	return (operation, devicename)

# Print help text
def print_help():
	progname = os.path.basename(sys.argv[0])
	print 'Usage:'
	print '  %s                   List removable volumes'       % progname
	print '  %s ls                List removable volumes'       % progname
	print '  %s help              Print this help text'         % progname
	print '  %s -?                Print this help text'         % progname
	print '  %s -h                Print this help text'         % progname
	print '  %s --help            Print this help text'         % progname
	print '  %s mount <device>    Mount the device'             % progname
	print '  %s eject <device>    Unmount and eject the device' % progname

# Get the system bus
def get_bus():
	return dbus.SystemBus()

# Get HAL manager
def get_hal_manager(sysbus):
	return dbus.Interface(sysbus.get_object(HAL_SERVICE, HAL_MANAGER_OBJ), HAL_MANAGER_IFACE)

# Get all HAL devices in (busname, Hal.Device interface) dictionary format
def get_devices(sysbus, halman):
	devpaths = halman.GetAllDevices()
	return dict([(x, dbus.Interface(sysbus.get_object(HAL_SERVICE, x), HAL_DEVICE_IFACE)) for x in devpaths])

# Extract HAL removable volumes from device dictionary
def get_volumes(sysbus, devs):
	remvols = dict()
	for (busname, dev) in devs.iteritems():
		try:
			if 'volume' in dev.GetProperty('info.capabilities'):
				# It's a volume; check if container block device is somehow removable
				parent = devs[dev.GetProperty('block.storage_device')]
				if parent.GetProperty('storage.removable') or parent.GetProperty('storage.bus') in ['usb', 'ieee1394']:
					remvols[busname] = dbus.Interface(sysbus.get_object(HAL_SERVICE, busname), HAL_VOLUME_IFACE)
		except dbus.exceptions.DBusException:
			pass
	return remvols

# Get the bus name associated to a device name
def get_bus_name(devs, remvols, devicename):
	matching = [x for x in remvols if devs[x].GetProperty('block.device') == devicename]
	if len(matching) == 0:
		print 'ERROR: no such device: %s' % devicename
		sys.exit(1)
	if len(matching) > 1:
		print 'ERROR: unexpected situation: %s matches more than one device' % devicename
		sys.exit(1)
	return matching[0]

# Perform "ls" operation
def ls_operation(devs, remvols):
	# Header
	print '%-12s%-12s%-38s%s' % ('Device', 'Label', 'UUID', 'Mount point')

	# Content to be printed (needed to sort the lines prior to printing them)
	lines = [(	devs[x].GetProperty('block.device'),
			devs[x].GetProperty('volume.label'),
			devs[x].GetProperty('volume.uuid'),
			devs[x].GetProperty('volume.mount_point'),
		) for x in remvols]

	# Actual printing
	for line in sorted(lines):
		print '%-12s%-12s%-38s%s' % line

# Perform "mount" operation
def mount_operation(devs, remvols, devicename, fsopts, uuidopts):
	# Get device bus name
	busname = get_bus_name(devs, remvols, devicename)

	# Try to see if it's already mounted
	mountpoint = devs[busname].GetProperty('volume.mount_point')
	if len(mountpoint) != 0:
		print 'ERROR: %s is already mounted on %s' % (devicename, mountpoint)
		sys.exit(1)

	# Get filesystem type
	fstype = devs[busname].GetProperty('volume.fstype')
	if len(fstype) == 0:
		print 'ERROR: unable to know filesystem type on %s' % devicename
		sys.exit(1)
	
	# Decide mount point
	label = devs[busname].GetProperty('volume.label')
	if len(label) == 0:
		mountpoint = os.path.basename(devicename)
	else:
		mountpoint = label
	
	# Get mount options
	uuid = devs[busname].GetProperty('volume.uuid')
	if uuid in uuidopts:
		mountopts = uuidopts[uuid]
	elif fstype in fsopts:
		mountopts = fsopts[fstype]
	else:
		mountopts = dbus.Array([], 's')
	
	# Try to mount the device
	try:
		remvols[busname].Mount(mountpoint, fstype, mountopts)
		print '%s mounted on %s' % (devicename, devs[busname].GetProperty('volume.mount_point'))
	except (dbus.exceptions.DBusException, ), err:
		print 'ERROR: unable to mount %s: %s' % (devicename, err.get_dbus_name())
		sys.exit(1)

# Perform "eject" operation
def eject_operation(devs, remvols, devicename):
	# Get device bus name
	busname = get_bus_name(devs, remvols, devicename)

	# Attempt to eject the device
	try:
		# First, attempt to unmount it
		try:
			remvols[busname].Unmount(dbus.Array([], 's'))
		except (dbus.exceptions.DBusException, ), err:
			if err.get_dbus_name() == 'org.freedesktop.Hal.Device.Volume.NotMounted':
				pass
			else:
				raise err

		# Then, eject it
		remvols[busname].Eject(dbus.Array([], 's'))
	except (dbus.exceptions.DBusException, ), err:
		print 'ERROR: unable to eject %s: %s' % (devs[busname].GetProperty('block.device'), err.get_dbus_name())

### Main program ###
try:
	# Get home dir
	home = get_home()
	
	# Redirect stderr
	redirect_stderr(home)

	# Create config file if it does not exist
	maybe_create_config_file(home)

	# Parse config file
	(fsopts, uuidopts) = parse_config_file(home)
	
	# Parse args
	(operation, devicename) = parse_args(sys.argv)
	
	# Help operation
	if operation in ['help', '-?', '-h', '--help']:
		print_help()
		sys.exit(0)
	
	# Get the system bus
	sysbus = get_bus()
	
	# Get the HAL manager
	halman = get_hal_manager(sysbus)
	
	# Get the list of devices
	devs = get_devices(sysbus, halman)
	
	# Get the list of volumes
	remvols = get_volumes(sysbus, devs)
	
	# Perform each operation
	if operation == 'ls':
		ls_operation(devs, remvols)
	elif operation == 'mount':
		mount_operation(devs, remvols, devicename, fsopts, uuidopts)
	else:
		eject_operation(devs, remvols, devicename)
	
	# Exit with success
	sys.exit(0)

except (Exception, ), err:
	traceback.print_exc(file=sys.stdout)
	sys.exit(1)
